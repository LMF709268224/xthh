#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

# test "" = "$(grep '^Signed-off-by: ' "$1" |
	 # sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	# echo >&2 Duplicate Signed-off-by lines.
	# exit 1
# }

pass=true
RED='\033[1;31m'
GREEN='\033[0;32m'
NC='\033[0m'

echo "Running Linters:"

# Run tslint and get the output and return code
tslint=$(tslint --config tslint.json --project tsconfig.json)
ret_code=$?

# If it didn't pass, announce it failed and print the output
if [ $ret_code != 0 ]; then
	printf "\n${RED}tslint failed:${NC}"
	echo "$tslint\n"
	pass=false
else
	printf "${GREEN}tslint passed.${NC}\n"
fi

# Run tsc
tsc=$(tsc --noEmit)
ret_code=$?

# If it didn't pass, announce it failed and print the output
if [ $ret_code != 0 ]; then
	printf "\n${RED}tsc failed:${NC}"
	echo "$tsc\n"
	pass=false
else
	printf "${GREEN}tsc passed.${NC}\n"
fi

if $pass; then
	exit 0
fi

exit 1
