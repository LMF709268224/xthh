//option optimize_for = LITE_RUNTIME;				// 优化速度
//option optimize_for = SPEED;
option optimize_for = CODE_SIZE;					// 优化大小
package casino;

import "dbextend.proto";							// 扩展数据


// 对象类型
enum eTYPE{
	TYPE_NONE					= 0;	// 无
	TYPE_CASH					= 1;	// 现金	
	TYPE_USER					= 2;	// 帐号
	TYPE_PAY					= 3;	// 支付
	TYPE_RANK					= 4;	// 排名
	TYPE_GUIDE					= 5;	// 引导
	TYPE_COST					= 6;	// 花费
	TYPE_WXHB					= 7;	// 微信红包
	TYPE_PUBLIC					= 8;	// 公众号
	TYPE_CHAT					= 9;	// 聊天
	TYPE_RESOURCE				= 10;	// 资源
	TYPE_LOTTERY				= 11;	// 抽取

	TYPE_STORE					= 15;	// 商店
	
	TYPE_MAIL					= 29;	// 邮件	
	TYPE_EVENT					= 35;	// 活动

	TYPE_ROOM					= 40;	// 房间
	TYPE_TABLE					= 50;	// 桌子
	TYPE_TABLE_PLAYER			= 51;	// 桌子玩家

	TYPE_GOLD					= 90;	// 游戏币
	TYPE_MONEY					= 91;	// 充值币

	
	TYPE_PLAYER					= 100;	// 玩家
	TYPE_PLAYER_RESOURCE		= 101;	// 玩家资源
	TYPE_PLAYER_TASK			= 102;	// 玩家任务
	TYPE_PLAYER_ACT				= 103;	// 玩家活动
	TYPE_PLAYER_PAY				= 104;	// 玩家充值
	TYPE_PLAYER_FRIEND			= 105;	// 玩家好友
	TYPE_PLAYER_MESSAGE			= 106;	// 玩家消息
	TYPE_PLAYER_MAIL			= 107;	// 玩家邮件
	TYPE_PLAYER_RED				= 108;	// 玩家红包
	TYPE_PLAYER_BIND			= 109;	// 玩家绑定
	TYPE_PLAYER_MATCH			= 110;	// 玩家比赛
	TYPE_PLAYER_LUCKY			= 120;	// 玩家抽取
	TYPE_PLAYER_HELPER			= 121;	// 玩家低保
	TYPE_PLAYER_LOTTERY			= 122;	// 玩家抽取
	TYPE_PLAYER_ENERGY			= 123;	// 玩家能量转盘
	TYPE_PLAYER_MJ				= 130;	// 玩家麻将游戏数据
	TYPE_PLAYER_GDY				= 150;	// 干瞪眼数据
	TYPE_PLAYER_TMHH			= 151;	// 天门晃晃数据
	TYPE_PLAYER_QJHH			= 152;	// 潜江晃晃数据
	TYPE_PLAYER_TMYH			= 155;	// 天门硬晃数据
	TYPE_PLAYER_HHYX			= 156;	// 洪湖游戏数据
	TYPE_PLAYER_HCYX			= 158;	// 洪湖游戏数据
	TYPE_PLAYER_SSHH			= 159;	// 石首晃晃数据
	TYPE_PLAYER_MJTL			= 160;	// 铜陵游戏数据
	TYPE_PLAYER_TCMJ			= 162;	// 通城麻将数据
	TYPE_LEVEL_PLAYER			= 200;	// 玩家等级
	TYPE_LEVEL_VIP				= 209;	// VIP等级

	TYPE_RANK_RICH				= 610;	// 财富排名
	TYPE_RANK_WIN				= 611;	// 胜场排名

	TYPE_VIP_EXP				= 999;	// VIP经验
	TYPE_ADMIN					= 1000;	// 管理员
}

// 聊天
message chat { 
  required uint32				id = 1; 	// 类型
  optional string			  text = 2; 	// 聊天文字
  optional string		       res = 3;		// 资源
  optional uint32		 casino_id = 10;	// 游戏id
}

// 对象
message object { 
  required uint32			 type = 1; 	// 类型
  optional uint32			   id = 2; 	// id
  optional uint32			param = 3;	// 参数(数量或等级)
  optional uint32			  min = 5;	// 最小值
  optional uint32			  max = 6;  // 最大值
}

// 资源类型
enum eRESOURCE{
	RESOURCE_NONE					= 0;	// 无
	RESOURCE_GOLD					= 1;	// 金币	
	RESOURCE_MONEY					= 2;	// 充值币
	RESOURCE_EXP					= 3;	// 玩家经验	
	RESOURCE_RETROACTIVE			= 5;	// 补签卡
	RESOURCE_DEVOTE					= 6;	// 贡献值(单位:1000?)
	RESOURCE_RED					= 8;	// 微信红包(单位:分)	
	RESOURCE_BEANS					= 9;	// 欢乐豆
	RESOURCE_CARD					= 10;	// 房卡
}

// 资源
message resource{ 
  required uint32		 id  = 1; 	// 唯一id
  required string		name = 2; 	// 名称
  optional uint32	 quality = 3;	// 品质

  optional uint32   reward_id = 10;	// 奖励id
  optional uint32 daily_limit = 11;	// 使用限制（1，表示一天只能吃一次）

  optional string  	    icon = 50;	// 图标

  optional string		desc = 60; 	// 介绍  
}

// 资源花费
message resource_need{
	required uint32			 id  = 1; 	// 资源id
	optional uint32	      count  = 2; 	// 数量
}

// 支付通知地址
message pay_url{
	required uint32				 id = 1; 	// 编号
	required string				url = 2; 	// 通知地址
}

// 红包商城
message red_store{
	required uint32				 id = 1; 	// 编号
	optional string		       name = 2;	// 名称
	optional uint32			   type = 5;	// 消耗资源类型
	optional uint32			  price = 6;	// 资源价格
	
	optional uint32			  limit = 50;	// 每日限购次数
	optional uint32			  today = 51;	// 今日购买次数
	optional uint32			  total = 52;	// 购买总数

	repeated object			  gains = 60;	// 获得数据

	optional string			  info = 100;	// 说明
	optional string			   res = 101;	// 图片资源

	optional uint64		  buy_time = 200[(dbextend.datetime) = true]; // 结束时间
}

// 红包信息
message red_data{
	repeated red_store		 stores = 1;	// 商品列表
	optional uint32		    red_min = 2;	// 每次提现下限(单位:分)
	optional uint32		    red_max = 3;	// 每次提现上限(单位:分)
	optional uint32		   red_cash = 5;	// 每日提现金额限制(0为无限制)
	optional uint32		    red_num = 6;	// 每日提现次数限制(0为无限制)
	optional bool 		red_disable = 10;	// 是否禁止提现(1为禁止,0为允许)
}

// 支付信息
message pay{
	required uint32				 id = 1; 	// 编号

	optional string		       name = 2;	// 名称
	optional string			channel = 3;	// 渠道
	optional string		   currency = 4;	//

	optional uint32			   type = 5;	//
	optional uint32			vip_exp = 6;	// 
	optional uint32			mail_id = 7;	// 邮件id
	optional uint32			  param = 8;	// 辅助参数

	optional bool			disable = 9;	// 是否禁用

	optional string			code_id = 10;	//
	optional string		  code_name = 11;	//
	optional string	      code_info = 12;	//
	
	optional string		    dicount = 13;   // 折扣
	optional uint32  original_price = 14;   // 原件
	optional uint32			    vip = 15;   // VIP等级限制
	
	optional uint32		 money_base = 20;	// 基础充值币
	optional uint32		 money_first= 22;	// 首次购买赠送
	optional uint32		 money_gift = 21;	// 购买赠送

	optional float			  price = 30;	//
	optional string		 price_info = 31;	//

	optional uint32			  point = 40;	// 点数
	optional uint32			    tag = 50;	//  

	optional uint32		 limit_count = 51;	// 限购次数
	optional uint64	limit_start_time = 52[(dbextend.datetime) = true];	// 限制开始时间
	optional uint64   limit_end_time = 53[(dbextend.datetime) = true]; // 限购结束时间
	optional string				func = 54;	// 功能类型标识
	optional uint32			addition = 55;  // 附加参数
	optional uint32			 next_id = 56;	// 后置购买项ID
	optional uint32				flag = 57;	// 购买项限制标记

	optional uint32			 url_id = 60;	// 支付地址id
	optional string			   info = 70;	// 价格说明
	optional string		   res_path = 100; 	// 资源文件

	repeated string		   channels = 200;	// 支持渠道列表
}

// 支付渠道信息
message pay_channel{
	required string				tag = 1;	// 渠道
	required string		       name = 2;	// 中文名称
	optional string		     system = 3;	// 系统(ios或android)
	optional bool			disable = 5;	// 是否禁用
	optional string				res = 10;	// 图片?
}

message pay_data{
	repeated pay			   pays = 1;	// 商品列表
	optional string			    url = 2;	// 通知地址
	repeated pay_channel   channels = 10;	// 支付渠道
	repeated pay_url		   urls = 11;	// 支付通知地址列表
}

// 房间
message room{
	required uint32				 id = 1; 	// 编号 
	optional string		       name = 2;	// 名称
	optional uint32	      casino_id = 3;	// 游戏id 
	optional bool			disable = 4;	// 是否禁用
	optional uint32			    cur = 5;	// 当前人数 

	optional uint32			ply_min = 7;	// 最小玩家人数
	optional uint32			ply_max = 8;	// 最大玩家人数

	optional uint32			   base = 10;	// 底注
	optional int64			   gold = 11;	// 必要金币数

	optional uint32		  cost_type = 12;	// 台费类型
	optional uint32		 cost_param = 13;	// 台费金额
	optional uint32		   gold_max = 14;	// 必要金币数最大值

	optional string			   info = 20;	// 信息	

	

	optional uint32		  server_id = 100;	// 对应服务器id

}

// 解散类型
enum eDISBAND{
	DISBAND_NONE					= 0;	// 没做处理
	DISBAND_YES						= 1;	// 解散
	DISBAND_NO						= 2;	// 不解散
}

// 操作积分
message op_score{
	required int32				type = 1;	// 类型
	optional float				  zs = 2;	// 牌型嘴数
	optional int32			   count = 5;	// 次数
	optional int32			   score = 10;
}

message card_group{
	optional int32				type = 1;	// 
	optional int32				  op = 2;
	optional uint32		   target_id = 5;
	optional int32			    card = 8;	// 操作牌
	repeated int32			   cards = 10;
}

// 玩家麻将数据
message player_mj{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}


// 玩家铜陵游戏
message player_mjtl{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}


// 玩家石首晃晃
message player_sshh{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

// 玩家干瞪眼数据
message player_gdy{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

// 玩家天门晃晃数据
message player_tmhh{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

// 玩家天门硬晃数据
message player_tmyh{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}


// 玩家洪湖游戏
message player_hhyx{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

// 玩家汉川游戏
message player_hcyx{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

// 玩家潜江晃晃数据
message player_qjhh{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

// 通城麻数据
message player_tcmj{
	optional uint64				  id = 1; 			    // 唯一id

	optional uint32		  play_total = 10;				// 胡牌总数
	optional uint32		  play_today = 11;				// 胡牌今日
	optional uint64		   play_time = 19[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32		 hupai_total = 20;				// 胡牌总数
	optional uint32		 hupai_today = 21;				// 胡牌今日
	optional uint64		  hupai_time = 29[(dbextend.datetime) = true]; 		// 最后胡牌时间

	optional uint32	  pailaizi_total = 30;				// 飘癞子次数
	optional uint32	  pailaizi_today = 31;				// 飘癞子今日
	optional uint64	   pailaizi_time = 39[(dbextend.datetime) = true]; 		// 最后时间

	optional uint32	 fangchong_total = 40;				// 放铳次数
	optional uint32	 fangchong_today = 41;				// 放铳今日
	optional uint64	  fangchong_time = 49[(dbextend.datetime) = true]; 		// 最后放铳时间

	optional uint32	    beizan_total = 50;				// 被赞次数
	optional uint32	    beizan_today = 51;				// 被赞今日
	optional uint64	    beizan_time =  59[(dbextend.datetime) = true]; 		// 最后被赞时间

	optional uint32	   timeout_total = 60;				// 超时次数
	optional uint32	   timeout_today = 61;				// 超时今日
	optional uint64	    timeout_time = 69[(dbextend.datetime) = true]; 		// 超时时间

	optional uint32	     quit_total = 70;				// 退出次数
	optional uint32	     quit_today = 71;				// 退出今日
	optional uint64	      quit_time = 79[(dbextend.datetime) = true]; 	// 退出时间
}

message coordinate{
	optional double		   latitude = 1;    // 纬度
	optional double		  longitude = 2;    // 经度
	optional string			address = 10;	// 真实地址
	optional string				 ip = 20;	// ip
	optional string		  ipaddress = 21;	// ipaddress
}

message ting_card{
	required int32			    outcard = 1;
	repeated int32				hucards = 10;		
}

// 桌子玩家
message table_player{
	optional uint32				 id = 1; 	// 玩家编号 
	optional string		   nickname = 2;	// 玩家昵称
	optional uint32				sex = 3;	// 玩家性别
	optional bool				bot = 4;	// 机器人
	optional uint32			 avatar = 5;	// 头像
	

	optional bool			  ready = 6;	// 是否准备
	optional float			  score = 7;	// 积分
	optional uint32			   time = 8;	// 当前时间
	optional int32		   multiple = 9;	// 倍数	(-1, 0标示不翻倍)

	optional uint32			 status = 10;	// 玩家状态
	optional string			  phone = 11;	// 	
	optional uint32				bet = 12;	// 下注金额	
	optional int64			   gold = 14;	// 携带资金
			
	optional bool		    managed = 15;	// 托管
	optional bool			   ting = 16;	// 是否听牌
	optional int32			  param = 17;	// 辅助参数
	optional int32		  ting_type = 18;	// 听牌类型

	optional bool				 ai = 20;	// 机器人
	optional uint32			disband = 21;	// 是否解散房间状态
	optional uint32		  lord_cont = 22;	// 连续做庄次数
	optional uint32		 lord_total = 30;	// 坐庄次数
	optional uint32		  win_total = 31;	// 胜利次数
	optional uint32		 lost_total = 32;	// 失败次数
	optional uint32		 play_total = 33;	// 游戏次数
	optional uint32	  timeout_total = 34;	// 超时次数
	optional uint32		 quit_total = 35;	// 退出次数
	optional uint32		hupai_total = 36;	// 胡牌次数
	optional uint32		 zimo_total = 37;	// 自摸次数
	optional uint32		laizi_total = 39;	// 飘癞次数
	optional uint32		  quit_time = 40;	// 退出时间
	optional uint32		match_level = 41;	// 当前比赛的晋级关数



	optional uint64		 entry_time = 50;	// 进入时间(用于计算游戏时长)
	optional int32		  last_card = 55;	// 最后摸到的牌
	optional bool  cancel_zhuochong = 56;	// 玩家取消捉冲
	optional int32		   jialaizi = 57;	// 玩家是否架赖子(参照casino_mjtl.proto里的)
	repeated op_score	   opscores = 60;	// 操作积分

	repeated ting_card	  tingcards = 70;	// 听牌结构

	repeated int32		   huacards = 98;	// 玩家打出的花牌
	repeated int32		  drawcards = 99;	// 玩家摸到的牌
	repeated int32		   curcards = 100;	// 玩家当前的牌
	repeated int32		   selcards = 101;	// 玩家选择的牌
	repeated int32		   outcards = 102;	// 玩家打出的牌
	repeated int32		cancelcards = 103;	// 玩家取消的牌
	repeated int32		  pengcards = 104;	// 玩家取消碰牌(一轮内有效)
	
	repeated card_group		 groups = 105;	// 玩家打出牌的分组

	optional uint64	   offline_time = 200;	// 离线时间
	optional float		score_total = 300;	// 总积分

	optional player_mj			data_mj = 350;	// 麻将游戏数据

	optional player_gdy			data_gdy = 400; //干瞪眼数据
	optional player_tmhh		data_tmhh = 401; //天门晃晃数据
	optional player_qjhh		data_qjhh = 402; //潜江晃晃数据
	optional player_hhyx		data_hhyx = 403; // 洪湖游戏
	optional player_hcyx		data_hcyx = 404; // 汉川游戏
	optional player_sshh		data_sshh = 405; // 石首晃晃
	optional player_mjtl		data_mjtl = 406; // 铜陵游戏
	optional player_tcmj		data_tcmj = 407; // 通城麻将

	optional string		        channel_head = 500;	// 渠道头像地址(如果没有使用默认avatar头像)
	optional string		    channel_nickname = 501;	// 渠道昵称
	optional string					 channel = 510;	// 渠道名称

	optional uint32		server_id = 1000;	// 服务器id(用于房间服务器向gate转发时判断依据)
	optional uint32		 guild_id = 1001;	// 公会id
	optional string		im_accid	= 2000;	// 易信语音id
	optional coordinate		coord = 2001;	// 坐标

}

enum eTABLE_OP{
	TABLE_OP_DRAWCARD			= -1;	// 摸牌
	TABLE_OP_OUTCARD			= -2;	// 打牌
	TABLE_OP_END				= -3;	// 流局
	TABLE_OP_BET				= -4;	// 下注
	TABLE_OP_JIALAIZI			= -5;	// 架癞子

	TABLE_OP_PENG				= 1;     // 碰
	TABLE_OP_GANG				= 2;     // 杠
	TABLE_OP_HU					= 3;	 // 胡
	TABLE_OP_ZIMO				= 4;     // 自摸
	TABLE_OP_CHAOTIAN			= 5;	 // 朝天
	TABLE_OP_BUZHUOCHONG		= 6;	 // 不做冲
	TABLE_OP_QIANGXIAO			= 7;     // 抢笑
	TABLE_OP_CHI				= 8;	 // 吃
	TABLE_OP_HUANBAO			= 9;	 // 换宝
	TABLE_OP_DG					= 10;	 // 对光
	TABLE_OP_CAIGANG			= 11;	 // 猜杠
	TABLE_OP_TING				= 12;	 // 听牌
	TABLE_OP_CANCEL				= 13;	 // 放弃
	TABLE_OP_ZHAO				= 14;	 // 招
	TABLE_OP_HUA				= 15;	 // 
	TABLE_OP_JIAN				= 16;	 // 
}

message table_param{
	required uint32	     player_id = 1; 
	optional int32			 param = 5; // 参数是否胡牌
	optional int32			  card = 6;	// 最后自动摸的牌	
	repeated int32			cards = 10;
}

// 桌子操作
message table_op{
	optional int32			   type = 1;	// 大类型
	optional int32				 op = 2;	// 操作	
	optional uint32			 status = 3;	// 当前状态
	optional uint32			   time = 4;	// 当前时间
	optional uint32			  param = 5;	// 辅助参数
	optional int32			   card = 6;	// 操作的牌
	repeated int32			  cards = 7;	// 操作完后的卡组.
	optional float			  score = 8;	// 操作积分	
	optional uint32	      player_id = 10;	// 玩家id
	optional uint32	      target_id = 11;	// 目标id

	repeated int32		   huacards = 12;	// 操作完后的卡组.
	repeated int32	   replacecards = 13;	// 替换的牌的卡组.
	repeated table_param	params = 100;	// 参数列表
}

// 桌子回合积分
message table_round_score{
	required uint32	      player_id = 1;	// 玩家id
	optional uint32			  param = 2;	// 辅助参数
	optional float			  score = 10;	// 本局获得积分
	optional float		score_total = 11;	// 总积分
	optional float		 score_init = 12;	// 初始化积分

	repeated card_group		 groups = 15;	// 玩家打出牌的分组
	repeated int32	   inithuacards = 18;	// 初始的花牌
	repeated int32		  initcards = 19;	// 初始的卡牌
	repeated int32		      cards = 20;	// 胡牌的卡牌
	repeated int32		   selcards = 21;	// 摊开的牌
	repeated int32		   curcards = 22;	// 当前的牌
	repeated int32		   huacards = 23;	// 花牌
	repeated op_score	   opscores = 50;	// 操作积分
	optional int32		 hupai_card = 100;	// 最后胡牌
	optional int32		  last_card = 101;	// 最后牌
}

// 桌子回合数
message table_round{
	required uint32				   lord_id = 1;		// 庄家id
	optional int32					fanpai = 2;		// 翻牌
	optional int32				     laizi = 3;		// 癞子牌
	optional int32				  nextcard = 9;		// 最后能摸的牌
	
	repeated table_op				   ops = 10;	// 操作
	repeated table_round_score		scores = 20;	// 积分
	repeated int32			   remaincards = 30;	// 剩余没拿的牌
}

// 桌子回放数据
message table_replay{
	repeated table_round			rounds = 10;	// 回合数据
}

message table_outcard{
	required uint32				player_id = 1;		// 玩家id
	optional int32					 type = 5;		// 类型
	optional int32					param = 6;		// 辅助参数
	repeated int32			        cards = 10;		// 打出的牌
}
// 桌子
message table{
	optional uint64				 id = 1; 	// 编号 
	optional string		       name = 2;	// 名称
	optional uint32	      casino_id = 3;	// 游戏id 
	optional uint32	        room_id = 4;	// 房间id 
	optional uint32			   mode = 5;	// 模式
	optional uint32			   join = 6;	// 加入模式
	optional bool			  pause = 7;	// 是否暂停(自建房游戏中有玩家退出就会暂停)
	optional uint32			   time = 8;	// 当前时间
	optional float			   base = 9;	// 底分
	optional uint64				bet = 10;	// 下注总金额			
	optional uint32			 status = 11;	// 游戏状态

	optional uint32	     play_total = 12;	// 总回合数
	optional uint32			   card = 13;	// 消耗房卡数	
	optional uint32			 round  = 15;	// 剩余回合数

	optional uint32		  master_id = 16;	// 房主id

	optional uint32		    lord_id = 20;	// 庄家索引
	optional uint32		      op_id = 21;	// opid
	optional uint32		  target_id = 22;	// op目标id
	optional uint32			   flag = 23;	// 创建额外标记
	optional uint32			cur_idx = 25;	// 当前处理玩家索引
	optional int32			fanpai	= 26;	// 翻牌
	optional int32			outcard = 27;	// 当前打出的牌
	optional int32			  laizi	= 28;	// 癞子牌
	optional int32		  cardcount = 29;	// 剩余牌数量
	repeated table_player	players = 30;	// 玩家坐位
	repeated int32	    remaincards = 31;	// 剩余没拿的牌
	repeated table_outcard outcards = 32;	// 桌子上打出后还没清理掉的牌
	optional uint32				 tag = 100;	// 分享用标示
	optional uint64		 create_time = 200;	// 创建时间	
	optional uint64	    disband_time = 201;	// 请求解散时间
	optional uint64		   quit_time = 202; // 房间退出时间
	optional uint64		    end_time = 203; // 房间退出时间
	optional uint64		  start_time = 204; // 桌子开局时间

	optional table_replay	  replay = 1000;// 重播数据
	optional uint32		  disband_id = 1001;// 申请解散房间玩家id
	optional uint32		disband_type = 1002;// 解散原因
	optional uint32			guild_id = 2000;// 公会id
	optional uint32	   guild_room_id = 2001;// 公会房间配置id

	optional uint32			match_id = 3000;// 比赛场id
	optional uint32			match_cost_type = 3001;
	optional uint32			match_cost_param = 3002;
	optional uint32			match_level	=	3003;
	optional string			match_name	=	3004;
}


// 游戏
message casino{
	required uint32				 id = 1; 	// 编号
	optional string		       name = 2;	// 名称
	optional bool			disable = 4;	// 是否禁用
	optional uint32				ver = 5;	// 版本
	optional string				url = 10;	// 更新地址
	optional uint32		  server_id = 15;	// 对应服务器id

//	repeated room			  rooms = 20;	// 房间列表
	optional string			  info = 100;	// 信息
}

// 道具
message item{
	required uint32				 id = 1; 	// 编号
	optional string		       name = 2;	// 名称	
	optional uint32		  casino_id = 3;	// 游戏id
	optional bool			disable = 4;	// 是否禁用
	optional uint32		      price = 5;	// 价格
	optional string			  icon = 10;	// 图标
}

//-----------------------------------------------------
//任务组
//-----------------------------------------------------
enum eTASK_TYPE {
	TASK_TYPE_NONE						= 0;	// 未知任务
	TASK_TYPE_CASINO					= 1;	// 成长任务
	TASK_TYPE_DAILY						= 2;	// 日常任务
}

//-----------------------------------------------------
//完成条件
//-----------------------------------------------------
enum eCONDITION{
	CONDITION_NONE					= 0;	// 无完成类型
	CONDITION_WIN					= 1;	// 赢牌
	CONDITION_PLAY					= 2;	// 游戏场数
	CONDITION_PRIVATE				= 3;	// 私人场场数
	CONDITION_AUTH					= 4;	// 手机验证任务
	CONDITION_PUBLIC				= 5;	// 绑定公众号		
	CONDITION_ROUND					= 7;	// 私人房局数
	CONDITION_CARD					= 8;	// 房卡使用数量
	CONDITION_NORMAL				= 9;	// 普通场游戏次数
	CONDITION_SHARE					= 10;	// 分享游戏
	CONDITION_BIND					= 100;	// 绑定玩家
}

// 任务数据
message task { 
  required uint32				 id  = 1; 	// 编号
  required string				name = 2; 	// 名称
  optional uint32			   group = 4;	// 组id,同组类型的任务不能多次触发
  optional uint32			    type = 5;	// 类型  
  optional uint32		   casino_id = 6;   // 棋牌类型    
  repeated int32			 casinos = 7;	// 游戏列表
  optional uint32		     timeout = 8;	// 完成的限制时间(单位:秒0为无限制)
  optional uint32			 prev_id = 9;	// 前置任务

  optional uint32	  condition_type = 10;	// 完成条件
  optional uint32		condition_id = 11;	// 完成id
  optional uint32	 condition_param = 12;	// 完成数据
  optional uint32	 condition_level = 13;	// 完成等级
  optional string	  condition_data = 14;	// 完成数据字符串
 
  repeated object			  awards = 101;	// 获得对象

  optional string		   res_path  = 150; // 资源文件 
  optional string		  icon_path  = 160; // 资源文件
  optional string				info = 200; // 说明  
}

// 活动类型
enum eACT{
	ACT_CHECKIN_DAY						= 1;		// 每日签到
	ACT_CHECKIN_COUNTER					= 2;		// 累计签到
	ACT_CARD_FREE						= 3;		// 房卡限免
	ACT_RED_RAIN						= 4;		// 红包雨
	ACT_SIGN							= 5;		// 七天签到
}

// 活动
message act{
	required uint32					id  = 1;		// id
	optional string				  name  = 2;		// 名称
	optional bool			    disable = 10;		// 是否禁用
}

// 每日签到
message act_checkin_day{
	required uint32					 id = 1;		// id
	optional uint32				    idx = 2;		// 索引
	optional uint32				  param = 5;		// 补签花费
	repeated object				 awards = 10;		// 奖励
	repeated object			 vip_awards = 20;		// 奖励
}

// 累计签到
message act_checkin_counter{
	required uint32					 id = 1;		// id	
	optional uint32				    idx = 2;		// 索引
	optional uint32				  param = 5;		// 累计签到次数
	repeated object				 awards = 10;		// 奖励
	repeated object			 vip_awards = 20;		// 奖励
}

// 房卡限免
message act_card_free{
	required uint32					 id = 1;	// id
	optional uint32				   type = 2;
	optional bool				disable = 3;	// 是否禁用
	optional uint64		     start_date = 10[(dbextend.datetime) = true];
	optional uint64		       end_date = 11[(dbextend.datetime) = true];
	optional uint32		     start_time = 20;
	optional uint32		       end_time = 21;
}

// 红包雨
message red_rain{
	optional uint32					rate = 1;	// 概率
	optional uint32					 min = 2;	// 最小值数值(分)
	optional uint32					 max = 3;	// 最大值数值(分)
}

//message red_rain_ary{
//	repeated red_rain			  rains = 1;
//}

message act_red_rain{
	required uint32					 id = 1;	// id
	optional bool				disable = 3;	// 是否禁用
	optional uint64		     start_date = 10[(dbextend.datetime) = true];
	optional uint64		       end_date = 11[(dbextend.datetime) = true];
	optional uint32		     start_time = 20;
	optional uint32		       end_time = 21;
	optional uint32				 amount = 30;	// 总额
	optional uint32		     play_today = 31;	// 今日游戏次数
	repeated uint32			  week_loop = 32;	// 周循环
	repeated red_rain			  rains = 100;
	//repeated red_rain_ary		  rains = 100;
}

enum eEXCHANGE_TYPE{
	EXCHANGE_UNLIMIT					= 0;		// 无时间段限制
	EXCHANGE_TODAY						= 1;		// 每日领取
	EXCHANGE_WEEK						= 2;		// 每周领取
	EXCHANGE_MONTH						= 3;		// 每月领取
}


// 绑定信息
message bind_data{
	optional bool       exchange_enable = 10;	// 是否允许兑换房卡
	optional bool         devote_enable = 11;	// 是否允许贡献
	optional uint32			card_start	= 20;	// 开始计数卡数
	
	optional float		      devote_plus = 30;	// 每打一局游戏加成
	optional uint32		  init_award_play = 31;	// 初始奖励私人房局数
	optional uint32		 init_award_point = 32;	// 初始奖励贡献点数
	optional uint32		 bind_award_point = 33;	// 绑定奖励贡献点数
	optional uint32		devote_vip_level = 40;	// 产生贡献的VIP等级(0为绑定)

	optional uint32		  exchange_type	= 51;	// 点数提取类型限制(0为无限制,1:每日提取,2:每周提取,3:每月提取)
	optional uint32		  exchange_num	= 52;	// 房卡领取次数限制
	optional uint32		  exchange_gain = 53;	// 点数提取上限()
	optional uint32		  exchange_cost = 54;	// 点数转卡消耗值(默认为1000)
	optional uint32		   exchange_min = 55;
	optional uint32		   exchange_max = 56;
	optional uint32		   exchange_limit = 57;
}

// 工会配置信息
message guild_data{
	optional uint32	guild_member_max  = 1;	// 房间成员最大只(默认为500)
	optional uint32	    guild_join_max  = 2;	// 最大同时加入公会数(默认为5)
	optional uint32	 guild_request_max  = 3;	// 最大同时请求公会数(默认为5)
	optional uint32	 guild_name_max  = 4;	// 公会名称最大字数(默认为8)
	optional uint32  guild_create_card = 5; // 首次创建工会所需消耗的房卡数
	
	
	optional uint32    guild_viplevel = 12;	// 公会创建最低VIP等级
	optional uint32	guild_friend_cost = 13;	// 公会成员从好友转换房卡消耗
	optional uint32	 guild_close_cost = 14;	// 公会关闭房卡消耗
	optional uint32	  guild_name_cost = 15; // 公会改名房卡消耗

	
	
	optional bool  guild_table_real  = 40;	// 是否公会桌子实时刷新
	optional bool guild_close_enable = 41;	// 是否允许解散工会
	optional bool  guild_kick_enable = 42;	// 是否允许踢出成员
	optional bool  guild_quit_enable = 43;	// 是否允许退出工会
	optional bool  guild_room_enable = 44;	// 是否开启工会桌子
	optional bool  guild_room_log_enable = 45;// 是否开启公会桌子查询
	optional bool  guild_name_enable = 46;	// 是否允许改名字
	optional bool  guild_friend_enable = 47;	// 是否好友转成会员
	optional bool  guild_power_enable = 48;	// 是否允许好友创建房间
	optional bool  guild_log_enable = 49;	// 是否允许查询日志

	optional uint32	guild_room_max		= 50;	// 房间最大类型(最小为1，默认为5)
	optional uint32	guild_room_card_min	= 52;	// 房间压卡最低值
	optional uint32	guild_room_card_max = 53;	// 房间压卡最高值
	optional uint32	guild_room_table_min= 55;	// 房间桌子最大数(最小为1，默认为2)
	optional uint32	guild_room_table_max= 56;	// 房间桌子最大数(最小为1，默认为2)
	optional uint32	guild_room_log_time = 58;	// 房间桌子查询间隔时间(单位秒0为不限制)
	optional uint32	guild_room_create_day = 59;	// 房间每天创建最大次数(0为不限制)

	optional uint32	guild_create_table_time = 60;	// 检查创建桌子的间隔时间默认为0(单位秒0为不限制)
	optional uint32	guild_request_time = 61;		// 公会请求数据间隔

	optional uint32	     guild_log_page = 70[default = 50];	// 每页日志默认数
	optional uint32      guild_log_time = 71[default = 1];	// 日志请求间隔
	optional uint32      guild_log_day	= 72[default = 2];	// 日志保留天数

	optional uint32	 guild_room_close	= 100;		// 公会房间强制关闭id
}

// 对象类型
enum eGUILD_MEMBER_POWER{	
	GUILD_MEMBER_POWER_CARD				= 1;		// 使用房卡创建房间
}

// 公会成员
message guild_member{
	optional uint32		  			 id = 1;		// 成员id
	optional string			   nickname = 2;		// 昵称
	optional uint32					sex = 3;		// 玩家性别
	optional bool				 online = 4;		// 是否在线	
	optional uint32				 avatar = 5;		// 头像
	optional uint32			  player_id = 6;		// 玩家id

	optional string				channel = 10;		// 登录渠道
	optional string		   channel_head = 11;		// 渠道头像地址(如果没有使用默认avatar头像)
	optional string	   channel_nickname = 12;		// 渠道昵称
			
	optional uint64	         login_time = 100;		// 最后上线时间
	optional uint64	          join_time = 101;		// 加入公会时间	
	
	optional uint32		          power = 200;		// 权限
	// 创建房间
	optional uint32		  table_create_total = 210;
	optional uint32		  table_create_today = 211;
	optional uint32		   table_create_week = 212;
	optional uint32		  table_create_month = 213;
	optional uint64		   table_create_time = 215[(dbextend.datetime) = true];

	optional uint32		  table_play_total = 220;
	optional uint32		  table_play_today = 221;
	optional uint32		   table_play_week = 222;
	optional uint32		  table_play_month = 223;
	optional uint64		   table_play_time = 225[(dbextend.datetime) = true];
}


// 公会加入请求
message guild_request{
	optional uint32		  			 id = 1;		// 请求id
	optional uint32			  player_id = 6;		// 玩家id

	optional string			   nickname = 11;		// 请求玩家昵称
	optional uint32					sex = 12;		// 玩家性别
	optional bool				 online = 13;		// 是否在线	
	optional uint32				 avatar = 14;		// 头像
	optional string				channel = 15;		// 登录渠道
	optional string		   channel_head = 16;		// 渠道头像地址(如果没有使用默认avatar头像)
	optional string	   channel_nickname = 17;		// 渠道昵称

	optional uint32			leave_guild = 18;		// 离开工会的次数

	optional uint64	      request_time = 100;		// 请求时间
}

message guild_room{
	optional uint32		  			id = 1;			// 房间配置id
	optional uint32			  guild_id = 2;			// 公会id
	optional uint32			 casino_id = 10;		// 游戏id
	optional uint32	  		   room_id = 11;		// 房间id
	optional uint32			 master_id = 12;		// 房主id
	optional float		          base = 13;		// 底注
	optional uint32		         round = 14;		// 房间回合数
	optional uint32				  flag = 15;		// 标记
	optional uint32				amount = 20;		// 保留房间数

	optional uint32			 card_curr = 30;		// 当前可用房卡数
	optional uint32			 card_gain = 31;		// 累计加卡数
	optional uint64		card_gain_time = 32;		// 最后加卡时间
	optional uint32			 card_cost = 33;		// 累计花费卡数
	optional uint64		card_cost_time = 34[(dbextend.datetime) = true];	// 最后用卡时间

	optional uint64		   create_time = 100[(dbextend.datetime) = true];	// 创建时间
}

message guild_table_player{
	optional uint32				 id = 1; 	// 玩家编号 l
	optional string		   nickname = 2;	// 玩家昵称
	optional uint32				sex = 3;	// 玩家性别
	optional uint32			 avatar = 5;	// 头像	

	optional bool			  ready = 6;	// 是否准备
	optional float			  score = 7;	// 当前积分

	optional string		     channel_head = 500;	// 渠道头像地址(如果没有使用默认avatar头像)
	optional string		 channel_nickname = 501;	// 渠道昵称
	optional string				  channel = 510;	// 渠道名称
}

message guild_table_log{
	optional uint32		  				 id = 1;		// 日志id
	optional uint32				   guild_id = 2;		// 公会id
	optional uint32		  	  guild_room_id = 3;		// 房间配置id
	optional uint32				  casino_id = 10;		// 游戏id
	optional uint32	  				room_id = 11;		// 房间id
	optional uint32				  master_id = 12;		// 房主id
	optional uint64				   table_id = 13;		// 桌子id
	optional uint32				  table_tag = 14;		// 房间号
	optional uint32				  replay_id = 15;		// 回放id

	optional uint32				  round_max = 20;		// 房间回合数
	optional uint32				  round_cur = 21;		// 房间实际回合数
	optional uint32				       card = 22;		// 房卡消耗

	optional float					   base = 25;		// 底注
	optional uint32				 player_max = 26;		// 玩家最大人数
	repeated guild_table_player		players = 50;		// 玩家列表

	optional uint64		        create_time = 100[(dbextend.datetime) = true];	// 创建时间
	optional uint64		        remove_time = 101[(dbextend.datetime) = true];	// 结束时间
}



// 等待开始的桌子
message guild_table{
	optional uint64		  				id = 1;			// 桌子id
	optional uint32		  		 casino_id = 2;			// 游戏id
	optional uint32		  		   room_id = 3;			// 房间id
	optional uint32				 master_id = 4;			// 房主id
	optional uint64				  table_id = 5;			// 桌子id
	optional uint32					 round = 6;			// 回合数
	optional float					  base = 7;			// 底分
	optional uint32				  guild_id = 9;			// 公会id
	optional uint32			 guild_room_id = 8;			// 公会房间配置id
	optional uint32					   tag = 10;		// 分享房间号
	optional uint32					  flag = 11;		// 标记
	repeated guild_table_player	   players = 20;		// 当前玩家数据

}

// 公会信息
message guild{
	optional uint32		  			id = 1;			// 公会id
	optional uint32			 master_id = 2;			// 会长id
	optional string				  name = 3;			// 名称
	optional uint32				online = 4;			// 在线成员
	// 公会房间相关数据
	optional uint32		room_create_total = 10;
	optional uint32		room_create_today = 11;
	optional uint32		room_create_week  = 12;
	optional uint32		room_create_month = 13;
	optional uint64		 room_create_time = 15[(dbextend.datetime) = true];

	optional uint32		room_remove_total = 20;
	optional uint32		room_remove_today = 21;
	optional uint32		 room_remove_week = 22;
	optional uint32		room_remove_month = 23;
	optional uint64		 room_remove_time = 25[(dbextend.datetime) = true];

	optional uint32			room_log_total = 30;
	optional uint32			room_log_today = 31;
	optional uint32			room_log_week  = 32;
	optional uint32			room_log_month = 33;
	optional uint64			room_log_time = 35[(dbextend.datetime) = true];

	optional bool				rank_flag = 40;		// 会长设置开启会员查看排行榜信息开发 true:开启 false:关闭
	
	repeated guild_member	   members = 50;		// 成员列表
	repeated guild_request	  requests = 51;		// 成员加入请求列表
	repeated guild_room			 rooms = 52;		// 公会房间组列表

	repeated guild_table		 tables = 100;		// 等待开始的房间
	repeated guild_table_log	  logs = 101;		// 今日桌子日志

	optional uint64	       create_time = 200[(dbextend.datetime) = true]; 	// 创建公会时间	
}


message match_table_player{
	optional uint32						 id = 1; 	// 玩家编号 l
	optional string				   nickname = 2;	// 玩家昵称
	optional uint32						sex = 3;	// 玩家性别
	optional uint32					 avatar = 5;	// 头像	

	optional bool					  ready = 6;	// 是否准备
	optional float					  score = 7;	// 当前积分
	optional uint32					   rank = 8;	// 排名
	optional uint32					  level = 9;    // 当前比赛场的晋级关数

	optional string		        channel_head = 500;	// 渠道头像地址(如果没有使用默认avatar头像)
	optional string			channel_nickname = 501;	// 渠道昵称
	optional string				     channel = 510;	// 渠道名称

	optional uint32					 item_id = 1000;// 奖励对象id
}

message match_table_log{
	optional uint32		  				 id = 1;		// 日志id
	optional uint32					   flag = 2;		// 房间标记
	optional uint32			   	   match_id = 5;		// 比赛场id
	optional uint32				  casino_id = 10;		// 游戏id
	optional uint32	  				room_id = 11;		// 房间id
	optional uint32				  master_id = 12;		// 房主id
	optional uint64				   table_id = 13;		// 桌子id
	optional uint32				  table_tag = 14;		// 房间号
	optional uint32				  replay_id = 15;		// 回放id
	

	optional uint32				  round_max = 20;		// 房间回合数
	optional uint32				  round_cur = 21;		// 房间实际回合数
	optional uint32				       card = 22;		// 房卡消耗
	optional uint32					  level = 23;		// 比赛场闯关关数
	optional string					   name = 24;		// 比赛场名字

	optional float					   base = 25;		// 底注
	optional uint32				 player_max = 26;		// 玩家最大人数
	repeated match_table_player		players = 50;		// 玩家列表


	optional uint64		        create_time = 100[(dbextend.datetime) = true];	// 创建时间
	optional uint64		        remove_time = 101[(dbextend.datetime) = true];	// 结束时间
}

// 比赛桌子的状态
message match_status{
	optional uint32				signup = 1;
}

// 比赛场开放时间段
message match_open_time{
	optional uint32		st = 1;		// 开放起始时间
	optional uint32		et = 2;		// 开放结束时间
}

// 比赛的桌子
message match_room{
	optional uint32		  			id = 1;			// 房间配置id
	optional uint32			   disable = 2;			// 是否禁用
	optional string				  name = 3;
	optional string				  desc = 4;
	optional string				   res = 5;

	optional uint32			 casino_id = 10;		// 游戏id
	optional uint32	  		   room_id = 11;		// 房间id

	optional float		          base = 13;		// 底注
	optional uint32		         round = 14;		// 房间回合数
	optional uint32				  flag = 15;		// 标记
	optional uint32			     level = 16;		// 比赛场关数
	optional uint32			 promotion = 17;		// 比赛场单关晋级人数

	optional uint32			 cost_type = 30;		// 报名扣除资源类型
	optional uint32			cost_param = 31;		// 报名扣除资源数量

	repeated uint32			 week_loop = 32;		// 周期循环，只能按照周循环

	repeated uint32				 items = 40;		// 奖励对象信息(0:为失败玩家奖励,1为1个人奖励,2为2个人奖励,3为3个人奖励,4为4个人奖励,5为5个人奖励)
	optional uint32			  same_max = 50;		// 同时开启最大数
	optional uint32			   day_max = 51;		// 每人每日参加最大次数(0:为无限制)
	optional uint32			   task_id = 52;		// 绑定的任务ID

	optional uint64		    start_time = 100[(dbextend.datetime) = true];	// 创建时间
	optional uint64		      end_time = 101[(dbextend.datetime) = true];	// 结束时间
	repeated match_open_time open_time = 102;		// 比赛场开放时间段
}

message match_item{
	optional uint32			      id = 1; 				// lottery_item id
	optional string			    name = 2; 				// 名称
	optional uint32			    type = 5;				// 类型
	optional uint32			   param = 6;				// 参数
	optional string			     res = 10; 				// 资源信息
}

// 比赛配置信息
message match_data{
	optional bool		    match_enable = 1;			// 是否开启比赛房(大开关)
	optional uint32		  match_log_time = 2;			// 比赛场日志查询间隔时间(0为不限制)
	optional string		   match_channel = 3;			// 参赛渠道
	optional uint32			 match_share = 4[default = 1];			// 分享方式(1为分享好友，2为分享朋友圈)
	optional uint32		  match_bot_time = 5;			// 比赛场加入机器人的等待时间
    repeated match_item			  items  = 1000;		// 掉落对象
	repeated match_room			  rooms  = 1001;		// 比赛房间
	repeated match_status		  status = 1002;		// 
}

message card_test{
	optional uint32		tag			= 1;
	optional uint32		casino_id	= 2;
	optional uint32		room_id		= 3;
	optional uint32		round		= 4;
	optional uint32		playerlord	= 5;
	optional float		base		= 6;
	optional uint32		amount		= 7;
	repeated int32		cards		= 10;
}

message broadcast_config {
	optional uint32		id		=	1;	// 广播内容ID
	optional bool		disable =	2;	// 当前广播状态 1-开启 0-关闭
	optional string		content =   3;	// 当前广播的内容
	optional uint32		play_duration	=	4;	// 广播滚动时长
	optional uint32		play_interval	=	5;	// 广播间隔时间
	optional uint32		start_time		=	6;	// 广播开始时间
	optional uint32		end_time		=	7;	// 广播结束时间
	optional uint32		create_time		=	8;	// 广播创建时间
	optional uint32		update_time		=	9;	// 更新时间
	optional uint32		weight			=	10;	// 播放权重
}

message bind_third_robot {
	optional uint32 id = 1;
	optional uint32 guild_id = 2;
	optional string type = 3;
	optional string robot_id = 4;
	optional string open_group_id = 5;
	optional string union_id = 6;
	optional string group_title = 7;
	optional string xl_group_id = 8;
	optional string nonce = 9;
	optional uint32 create_time = 10;
	optional uint32 update_time = 11;
	optional uint32 push = 12;
}

message vip_config {
	optional uint32		   id = 1;		// ID
	optional uint32		level = 2;		// VIP等级
	optional uint32		  exp = 3;		// 升级所需经验值
	optional string		  res = 4;		// 资源名称
	optional string		 name = 5;		// 描述名称
}

message energy_turnable {
	optional uint32		id = 1;					// ID
	optional bool		disable = 2;			// 状态	1:关闭 0:开启
	optional uint32		winner_gain = 3;		// 赢家获取的能量值
	optional uint32		loser_gain = 4;			// 输家获取的能量值
	optional uint32		draw = 5;				// 开启抽奖的能量阈值
	optional uint32		room_id = 6;			// 对应的房间ID
	optional uint64		start_time	= 7;
	optional uint64		end_time = 8;
	optional string		name = 9;
	repeated uint32		week_loop = 50;			// 周期循环时间
	repeated energy_turnable_item item = 80;	// 转盘抽奖物品对象
}

message energy_turnable_item {
	optional uint32		id = 1;			// ID
	optional uint32		et_id = 2;		// 归属转盘ID
	optional bool		disable = 3;	// 状态	1:关闭 0:开启
	optional uint32		type = 4;		// 物品类型
	optional uint32		type_id = 5;	// 物品类型ID
	optional uint32		param = 6;		// 附加参数
	optional uint32		rate = 7;		// 抽奖概率
	optional string		name = 8;		// 物品名称
	optional string		res_path = 9;	// 物品资源路径
	optional string		desc = 10;		// 物品描述
}
